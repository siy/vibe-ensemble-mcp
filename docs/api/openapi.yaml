openapi: 3.0.3
info:
  title: Vibe Ensemble MCP Server API
  description: |
    REST API for the Vibe Ensemble MCP Server - a comprehensive coordination hub 
    for multiple Claude Code instances with distributed task execution, unified 
    management, communication, and issue tracking.
    
    ## Features
    - Agent registration and management
    - Issue tracking and workflow management
    - Knowledge repository with search capabilities
    - Real-time messaging between agents
    - System monitoring and health checks
    
    ## Authentication
    Most endpoints require authentication via JWT tokens. Include the token in the
    Authorization header: `Authorization: Bearer <your-token>`
  version: 0.1.0
  contact:
    name: Vibe Ensemble Team
    url: https://github.com/siy/vibe-ensemble-mcp
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.vibe-ensemble.example.com
    description: Production server

paths:
  /api/health:
    get:
      summary: Health check
      description: Check the health status of the server and database connectivity
      tags:
        - System
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  timestamp:
                    type: string
                    format: date-time
        '503':
          description: System is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/stats:
    get:
      summary: System statistics
      description: Get overall system statistics including counts of agents, issues, messages, and knowledge entries
      tags:
        - System
      responses:
        '200':
          description: System statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  agents:
                    type: integer
                    example: 5
                  issues:
                    type: integer
                    example: 23
                  messages:
                    type: integer
                    example: 156
                  knowledge:
                    type: integer
                    example: 45
                  prompts:
                    type: integer
                    example: 12
                  timestamp:
                    type: string
                    format: date-time

  /api/agents:
    get:
      summary: List agents
      description: Retrieve a list of all registered agents with optional filtering
      tags:
        - Agents
      parameters:
        - name: limit
          in: query
          description: Maximum number of agents to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
        - name: offset
          in: query
          description: Number of agents to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: status
          in: query
          description: Filter by agent status
          required: false
          schema:
            type: string
            enum: [Active, Inactive, Disconnected, Error]
        - name: agent_type
          in: query
          description: Filter by agent type
          required: false
          schema:
            type: string
            enum: [Coordinator, Worker, Monitor]
      responses:
        '200':
          description: List of agents
          content:
            application/json:
              schema:
                type: object
                properties:
                  agents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Agent'
                  total:
                    type: integer
                  timestamp:
                    type: string
                    format: date-time

  /api/agents/{id}:
    get:
      summary: Get agent details
      description: Retrieve detailed information about a specific agent
      tags:
        - Agents
      parameters:
        - name: id
          in: path
          required: true
          description: Agent ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Agent details
          content:
            application/json:
              schema:
                type: object
                properties:
                  agent:
                    $ref: '#/components/schemas/Agent'
                  timestamp:
                    type: string
                    format: date-time
        '404':
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/issues:
    get:
      summary: List issues
      description: Retrieve a list of all issues with optional filtering
      tags:
        - Issues
      parameters:
        - name: limit
          in: query
          description: Maximum number of issues to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
        - name: offset
          in: query
          description: Number of issues to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: status
          in: query
          description: Filter by issue status
          required: false
          schema:
            type: string
            enum: [Open, InProgress, Resolved, Closed]
        - name: priority
          in: query
          description: Filter by issue priority
          required: false
          schema:
            type: string
            enum: [Low, Medium, High, Critical]
        - name: assigned_agent_id
          in: query
          description: Filter by assigned agent ID
          required: false
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of issues
          content:
            application/json:
              schema:
                type: object
                properties:
                  issues:
                    type: array
                    items:
                      $ref: '#/components/schemas/Issue'
                  total:
                    type: integer
                  timestamp:
                    type: string
                    format: date-time

    post:
      summary: Create issue
      description: Create a new issue
      tags:
        - Issues
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueRequest'
      responses:
        '201':
          description: Issue created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  issue:
                    $ref: '#/components/schemas/Issue'
                  timestamp:
                    type: string
                    format: date-time
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/issues/{id}:
    get:
      summary: Get issue details
      description: Retrieve detailed information about a specific issue
      tags:
        - Issues
      parameters:
        - name: id
          in: path
          required: true
          description: Issue ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Issue details
          content:
            application/json:
              schema:
                type: object
                properties:
                  issue:
                    $ref: '#/components/schemas/Issue'
                  timestamp:
                    type: string
                    format: date-time
        '404':
          description: Issue not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update issue
      description: Update an existing issue
      tags:
        - Issues
      parameters:
        - name: id
          in: path
          required: true
          description: Issue ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueRequest'
      responses:
        '200':
          description: Issue updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  issue:
                    $ref: '#/components/schemas/Issue'
                  timestamp:
                    type: string
                    format: date-time
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Issue not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete issue
      description: Delete an existing issue
      tags:
        - Issues
      parameters:
        - name: id
          in: path
          required: true
          description: Issue ID
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Issue deleted successfully
        '404':
          description: Issue not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/knowledge:
    get:
      summary: List knowledge entries
      description: Retrieve knowledge entries with optional filtering and search
      tags:
        - Knowledge
      parameters:
        - name: limit
          in: query
          description: Maximum number of entries to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
        - name: offset
          in: query
          description: Number of entries to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: category
          in: query
          description: Filter by category
          required: false
          schema:
            type: string
        - name: tag
          in: query
          description: Filter by tag
          required: false
          schema:
            type: string
        - name: search
          in: query
          description: Search in title and content
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of knowledge entries
          content:
            application/json:
              schema:
                type: object
                properties:
                  knowledge:
                    type: array
                    items:
                      $ref: '#/components/schemas/KnowledgeEntry'
                  total:
                    type: integer
                  timestamp:
                    type: string
                    format: date-time

  /api/knowledge/{id}:
    get:
      summary: Get knowledge entry
      description: Retrieve a specific knowledge entry
      tags:
        - Knowledge
      parameters:
        - name: id
          in: path
          required: true
          description: Knowledge entry ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Knowledge entry details
          content:
            application/json:
              schema:
                type: object
                properties:
                  knowledge:
                    $ref: '#/components/schemas/KnowledgeEntry'
                  timestamp:
                    type: string
                    format: date-time
        '404':
          description: Knowledge entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/messages:
    get:
      summary: List messages
      description: Retrieve messages with optional filtering
      tags:
        - Messages
      parameters:
        - name: limit
          in: query
          description: Maximum number of messages to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
        - name: offset
          in: query
          description: Number of messages to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: from_agent
          in: query
          description: Filter by sender agent ID
          required: false
          schema:
            type: string
        - name: to_agent
          in: query
          description: Filter by recipient agent ID
          required: false
          schema:
            type: string
        - name: message_type
          in: query
          description: Filter by message type
          required: false
          schema:
            type: string
            enum: [StatusUpdate, TaskAssignment, Notification, Request, Response]
      responses:
        '200':
          description: List of messages
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
                  total:
                    type: integer
                  timestamp:
                    type: string
                    format: date-time

components:
  schemas:
    Agent:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique agent identifier
        name:
          type: string
          description: Human-readable agent name
        agent_type:
          type: string
          enum: [Coordinator, Worker, Monitor]
          description: Type of agent
        status:
          type: string
          enum: [Active, Inactive, Disconnected, Error]
          description: Current agent status
        capabilities:
          type: array
          items:
            type: string
          description: List of agent capabilities
        metadata:
          type: object
          additionalProperties: true
          description: Additional agent metadata
        created_at:
          type: string
          format: date-time
          description: Agent registration timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
        last_seen:
          type: string
          format: date-time
          description: Last activity timestamp
      required:
        - id
        - name
        - agent_type
        - status
        - created_at
        - updated_at

    Issue:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique issue identifier
        title:
          type: string
          description: Issue title
        description:
          type: string
          description: Detailed issue description
        status:
          type: string
          enum: [Open, InProgress, Resolved, Closed]
          description: Current issue status
        priority:
          type: string
          enum: [Low, Medium, High, Critical]
          description: Issue priority level
        assigned_agent_id:
          type: string
          format: uuid
          nullable: true
          description: ID of assigned agent
        reporter_id:
          type: string
          description: ID of user or agent who reported the issue
        labels:
          type: array
          items:
            type: string
          description: Issue labels/tags
        metadata:
          type: object
          additionalProperties: true
          description: Additional issue metadata
        created_at:
          type: string
          format: date-time
          description: Issue creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
        resolved_at:
          type: string
          format: date-time
          nullable: true
          description: Resolution timestamp
      required:
        - id
        - title
        - description
        - status
        - priority
        - created_at
        - updated_at

    IssueRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          description: Issue title
        description:
          type: string
          minLength: 1
          maxLength: 5000
          description: Detailed issue description
        priority:
          type: string
          enum: [Low, Medium, High, Critical]
          description: Issue priority level
        assigned_agent_id:
          type: string
          format: uuid
          nullable: true
          description: ID of agent to assign the issue to
      required:
        - title
        - description
        - priority

    KnowledgeEntry:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique knowledge entry identifier
        title:
          type: string
          description: Knowledge entry title
        content:
          type: string
          description: Knowledge entry content
        category:
          type: string
          description: Knowledge category
        tags:
          type: array
          items:
            type: string
          description: Associated tags
        author_id:
          type: string
          description: Author identifier
        version:
          type: integer
          description: Entry version number
        metadata:
          type: object
          additionalProperties: true
          description: Additional metadata
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
      required:
        - id
        - title
        - content
        - category
        - tags
        - created_at
        - updated_at

    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique message identifier
        from_agent:
          type: string
          description: Sender agent identifier
        to_agent:
          type: string
          nullable: true
          description: Recipient agent identifier (null for broadcast)
        message_type:
          type: string
          enum: [StatusUpdate, TaskAssignment, Notification, Request, Response]
          description: Type of message
        content:
          type: object
          additionalProperties: true
          description: Message content payload
        metadata:
          type: object
          additionalProperties: true
          description: Additional message metadata
        created_at:
          type: string
          format: date-time
          description: Message timestamp
        delivered_at:
          type: string
          format: date-time
          nullable: true
          description: Delivery confirmation timestamp
      required:
        - id
        - from_agent
        - message_type
        - content
        - created_at

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error type or code
        message:
          type: string
          description: Human-readable error message
        details:
          type: object
          additionalProperties: true
          description: Additional error details
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
      required:
        - error
        - message
        - timestamp

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication

security:
  - BearerAuth: []

tags:
  - name: System
    description: System health and statistics
  - name: Agents
    description: Agent management and monitoring
  - name: Issues
    description: Issue tracking and workflow management
  - name: Knowledge
    description: Knowledge repository and search
  - name: Messages
    description: Inter-agent messaging