# Multi-stage Production Dockerfile for Vibe Ensemble MCP Server
# Optimized for production deployment with enhanced security and performance

# Build dependencies stage - Cache build tools
FROM rust:1.70-slim AS build-deps

RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    libsqlite3-dev \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Cache cargo dependencies
FROM build-deps AS cargo-deps

WORKDIR /app

# Copy workspace configuration for dependency caching
COPY Cargo.toml Cargo.lock ./

# Create dummy source files to cache dependencies
RUN mkdir -p vibe-ensemble-core/src vibe-ensemble-mcp/src vibe-ensemble-server/src \
    vibe-ensemble-storage/src vibe-ensemble-web/src vibe-ensemble-prompts/src \
    vibe-ensemble-security/src vibe-ensemble-monitoring/src

# Copy all Cargo.toml files for accurate dependency resolution
COPY vibe-ensemble-core/Cargo.toml ./vibe-ensemble-core/
COPY vibe-ensemble-mcp/Cargo.toml ./vibe-ensemble-mcp/
COPY vibe-ensemble-server/Cargo.toml ./vibe-ensemble-server/
COPY vibe-ensemble-storage/Cargo.toml ./vibe-ensemble-storage/
COPY vibe-ensemble-web/Cargo.toml ./vibe-ensemble-web/
COPY vibe-ensemble-prompts/Cargo.toml ./vibe-ensemble-prompts/
COPY vibe-ensemble-security/Cargo.toml ./vibe-ensemble-security/
COPY vibe-ensemble-monitoring/Cargo.toml ./vibe-ensemble-monitoring/

# Create dummy lib.rs files
RUN echo "fn main() {}" > vibe-ensemble-server/src/main.rs && \
    echo "" > vibe-ensemble-core/src/lib.rs && \
    echo "" > vibe-ensemble-mcp/src/lib.rs && \
    echo "" > vibe-ensemble-storage/src/lib.rs && \
    echo "" > vibe-ensemble-web/src/lib.rs && \
    echo "" > vibe-ensemble-prompts/src/lib.rs && \
    echo "" > vibe-ensemble-security/src/lib.rs && \
    echo "" > vibe-ensemble-monitoring/src/lib.rs

# Build dependencies only
RUN cargo build --release --locked && rm -rf target/release/deps/vibe_ensemble*

# Build stage - Build application with cached dependencies
FROM cargo-deps AS builder

# Set environment variables for reproducible builds
ENV CARGO_NET_RETRY=10
ENV CARGO_IO_TIMEOUT=600
ENV RUSTUP_MAX_RETRIES=10
ENV CARGO_INCREMENTAL=0
ENV RUSTFLAGS="-C target-cpu=native -C opt-level=3 -C link-dead-code"

# Copy actual source code
COPY vibe-ensemble-core/src/ ./vibe-ensemble-core/src/
COPY vibe-ensemble-mcp/src/ ./vibe-ensemble-mcp/src/
COPY vibe-ensemble-server/src/ ./vibe-ensemble-server/src/
COPY vibe-ensemble-storage/src/ ./vibe-ensemble-storage/src/
COPY vibe-ensemble-web/src/ ./vibe-ensemble-web/src/
COPY vibe-ensemble-prompts/src/ ./vibe-ensemble-prompts/src/
COPY vibe-ensemble-security/src/ ./vibe-ensemble-security/src/
COPY vibe-ensemble-monitoring/src/ ./vibe-ensemble-monitoring/src/

# Copy additional required files
COPY vibe-ensemble-web/templates/ ./vibe-ensemble-web/templates/
COPY vibe-ensemble-storage/migrations/ ./vibe-ensemble-storage/migrations/

# Build the application with optimizations
RUN cargo build --release --locked --bin vibe-ensemble-server

# Strip binary and verify
RUN strip target/release/vibe-ensemble-server && \
    ls -la target/release/vibe-ensemble-server && \
    file target/release/vibe-ensemble-server

# Security scanner stage
FROM builder AS security-scan

# Install security scanning tools
RUN apt-get update && apt-get install -y \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Scan for vulnerabilities in dependencies (placeholder for CI integration)
RUN echo "Security scan placeholder - integrate with CI/CD pipeline"

# Runtime stage - Use minimal base image
FROM debian:bookworm-slim AS runtime

# Install runtime dependencies with specific versions for security
RUN apt-get update && apt-get install -y \
    ca-certificates=20230311 \
    libssl3=3.0.11-1~deb12u2 \
    libsqlite3-0=3.40.1-2 \
    curl=7.88.1-10+deb12u5 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && apt-get autoremove -y

# Create non-root user with specific UID/GID for security
RUN groupadd -r -g 1001 vibe-ensemble && \
    useradd -r -u 1001 -g vibe-ensemble -d /app -s /sbin/nologin -c "Vibe Ensemble Service" vibe-ensemble

# Set up application directory with proper permissions
WORKDIR /app

# Create necessary directories with secure permissions
RUN mkdir -p /app/data /app/logs /app/config /app/tmp && \
    chmod 750 /app/data /app/logs /app/config && \
    chmod 1750 /app/tmp && \
    chown -R vibe-ensemble:vibe-ensemble /app

# Copy binary from builder stage with verification
COPY --from=builder --chown=root:root /app/target/release/vibe-ensemble-server /usr/local/bin/vibe-ensemble-server
RUN chmod 755 /usr/local/bin/vibe-ensemble-server && \
    ls -la /usr/local/bin/vibe-ensemble-server

# Copy database migrations with proper ownership
COPY --from=builder --chown=vibe-ensemble:vibe-ensemble /app/vibe-ensemble-storage/migrations/ /app/migrations/

# Copy web templates
COPY --from=builder --chown=vibe-ensemble:vibe-ensemble /app/vibe-ensemble-web/templates/ /app/templates/

# Install additional security tools
RUN apt-get update && apt-get install -y \
    dumb-init=1.2.5-2 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Switch to non-root user
USER vibe-ensemble

# Set secure default environment variables
ENV DATABASE_URL="sqlite:///app/data/vibe-ensemble.db"
ENV RUST_LOG="info,vibe_ensemble=debug"
ENV SERVER_HOST="0.0.0.0"
ENV SERVER_PORT="8080"
ENV METRICS_PORT="9090"
ENV RUST_BACKTRACE="0"

# Expose application and metrics ports
EXPOSE 8080 9090

# Enhanced health check with detailed monitoring
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/api/health && \
        curl -f http://localhost:9090/metrics > /dev/null || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["/usr/bin/dumb-init", "--"]
CMD ["vibe-ensemble-server"]

# Production stage - Maximum security and optimization
FROM runtime AS production

# Set production environment variables
ENV RUST_BACKTRACE=0
ENV RUST_LOG="warn,vibe_ensemble=info"
ENV ENVIRONMENT="production"
ENV TZ=UTC

# Security labels for container scanning
LABEL maintainer="Vibe Ensemble Team"
LABEL version="0.1.0"
LABEL description="Vibe Ensemble MCP Server - Production"
LABEL security.scan="enabled"
LABEL security.non-root="true"
LABEL security.readonly-rootfs="true"

# Ensure non-root user
USER vibe-ensemble

# Production startup with enhanced logging
ENTRYPOINT ["/usr/bin/dumb-init", "--"]
CMD ["sh", "-c", "echo 'Starting Vibe Ensemble MCP Server in production mode' && exec vibe-ensemble-server"]

# Development stage - Additional debugging tools
FROM runtime AS development

# Install development tools
USER root
RUN apt-get update && apt-get install -y \
    strace=6.1-0.1 \
    gdb=13.1-3 \
    valgrind=1:3.19.0-1 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

USER vibe-ensemble

# Development environment variables
ENV RUST_BACKTRACE=full
ENV RUST_LOG="debug,vibe_ensemble=trace"
ENV ENVIRONMENT="development"

ENTRYPOINT ["/usr/bin/dumb-init", "--"]
CMD ["vibe-ensemble-server"]

# Testing stage - For CI/CD pipelines
FROM builder AS testing

# Install testing dependencies
RUN apt-get update && apt-get install -y \
    sqlite3 \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Run tests
RUN cargo test --release --all-features

# Verify binary functionality
RUN timeout 10s ./target/release/vibe-ensemble-server --help || true

# Default target for production
FROM production