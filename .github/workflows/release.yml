name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v0.1.0'

permissions:
  contents: write
  packages: write
  pull-requests: read
  actions: read

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.tag }}" >> "$GITHUB_OUTPUT"
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Vibe Ensemble MCP ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          body: |
            ## Changes in ${{ steps.get_version.outputs.version }}

            ### Features
            - Complete main server application with HTTP API endpoints
            - Production-ready configuration and deployment setup
            - Cross-platform installation packages
            - Comprehensive documentation

            ### Installation

            **Quick install:**
            ```bash
            # macOS/Linux
            curl -fsSL https://vibeensemble.dev/install.sh | bash

            # Windows PowerShell
            iex ((New-Object System.Net.WebClient).DownloadString('https://vibeensemble.dev/install.ps1'))
            ```

            **Docker:**
            ```bash
            docker run -d --name vibe-ensemble -p 8080:8080 -p 8081:8081 ghcr.io/siy/vibe-ensemble-mcp:${{ steps.get_version.outputs.version }}
            ```

            See the full [Installation Guide](https://github.com/siy/vibe-ensemble-mcp/blob/main/docs/installation.md) for all installation methods.

  build-linux:
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> "$GITHUB_ENV"

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create archive
        run: |
          mkdir -p dist
          tar -czf dist/vibe-ensemble-mcp-${{ needs.create-release.outputs.version }}-linux-${{ matrix.target }}.tar.gz \
            -C target/${{ matrix.target }}/release \
            vibe-ensemble-server vibe-ensemble-mcp

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./dist/vibe-ensemble-mcp-${{ needs.create-release.outputs.version }}-linux-${{ matrix.target }}.tar.gz
          asset_name: vibe-ensemble-mcp-${{ needs.create-release.outputs.version }}-linux-${{ matrix.target }}.tar.gz
          asset_content_type: application/gzip

  build-macos:
    needs: create-release
    runs-on: macos-latest
    strategy:
      matrix:
        target: [x86_64-apple-darwin, aarch64-apple-darwin]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create archive
        run: |
          mkdir -p dist
          tar -czf dist/vibe-ensemble-mcp-${{ needs.create-release.outputs.version }}-macos-${{ matrix.target }}.tar.gz \
            -C target/${{ matrix.target }}/release \
            vibe-ensemble-server vibe-ensemble-mcp

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./dist/vibe-ensemble-mcp-${{ needs.create-release.outputs.version }}-macos-${{ matrix.target }}.tar.gz
          asset_name: vibe-ensemble-mcp-${{ needs.create-release.outputs.version }}-macos-${{ matrix.target }}.tar.gz
          asset_content_type: application/gzip

  build-windows:
    needs: create-release
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x86_64-pc-windows-msvc, aarch64-pc-windows-msvc]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create archive
        run: |
          New-Item -ItemType Directory -Path dist -Force
          Compress-Archive -Path target/${{ matrix.target }}/release/vibe-ensemble-server.exe, target/${{ matrix.target }}/release/vibe-ensemble-mcp.exe -DestinationPath dist/vibe-ensemble-mcp-${{ needs.create-release.outputs.version }}-windows-${{ matrix.target }}.zip

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./dist/vibe-ensemble-mcp-${{ needs.create-release.outputs.version }}-windows-${{ matrix.target }}.zip
          asset_name: vibe-ensemble-mcp-${{ needs.create-release.outputs.version }}-windows-${{ matrix.target }}.zip
          asset_content_type: application/zip

  build-docker:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:v0.12.5

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: extract_version
        run: |
          VERSION=${{ needs.create-release.outputs.version }}
          echo "version=${VERSION#v}" >> "$GITHUB_OUTPUT"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.optimized
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          tags: |
            ghcr.io/siy/vibe-ensemble-mcp:${{ steps.extract_version.outputs.version }}
            ghcr.io/siy/vibe-ensemble-mcp:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  # TODO: Re-enable DEB/RPM package creation when artifact workflow is fixed
