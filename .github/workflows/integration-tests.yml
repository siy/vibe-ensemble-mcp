name: Integration Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - '.github/workflows/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'vibe-ensemble-mcp/**'
      - 'vibe-ensemble-core/**'
      - 'vibe-ensemble-storage/**'
      - 'vibe-ensemble-prompts/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '.github/workflows/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'vibe-ensemble-mcp/**'
      - 'vibe-ensemble-core/**'
      - 'vibe-ensemble-storage/**'
      - 'vibe-ensemble-prompts/**'
  schedule:
    # Run integration tests nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  DATABASE_URL: sqlite://./integration_test.db
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse

concurrency:
  group: integration-tests-${{ github.workflow }}-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

jobs:
  scenario:
    name: ${{ matrix.name }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Coordinator Ticket Management
            test: test_coordinator_creates_assigns_tickets
            db: coordinator_test.db
            setup_git: false
          - name: Multi-Worker Workspace Isolation
            test: test_multi_worker_isolated_workspaces
            db: workspace_test.db
            setup_git: true
          - name: Error Recovery and Task Reassignment
            test: test_error_recovery_workflow
            db: recovery_test.db
            setup_git: false

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "1.82.0"

      - name: Set up git for workspace tests
        if: ${{ matrix.setup_git }}
        run: |
          git config --global user.name "Workspace Tests"
          git config --global user.email "workspace-tests@vibe-ensemble.local"
          git config --global init.defaultBranch main
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Install system SQLite (if not using bundled)
        run: |
          sudo apt-get update
          sudo apt-get install -y libsqlite3-dev pkg-config

      - name: Cache cargo (compiler-aware)
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          shared-key: integration-tests

      - name: Run scenario
        run: |
          cargo install cargo-nextest --locked || true
          NEXTEST_SHOW_OUTPUT=always cargo nextest run --locked --test coordinator_worker_integration "${{ matrix.test }}"
        env:
          RUST_BACKTRACE: 1
          DATABASE_URL: sqlite://./${{ matrix.db }}
          SQLX_OFFLINE: true

      - name: Upload DB (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.db }}-artifact
          path: ./${{ matrix.db }}
          if-no-files-found: ignore
          retention-days: 7

  complete-integration-suite:
    name: Complete Integration Test Suite
    needs: [scenario]
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "1.82.0"
          components: rustfmt, clippy

      - name: Install system SQLite (if not using bundled)
        run: |
          sudo apt-get update
          sudo apt-get install -y libsqlite3-dev pkg-config

      - name: Cache cargo (compiler-aware)
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          shared-key: integration-tests

      - name: Build integration tests
        run: cargo build --workspace --tests --locked
        env:
          SQLX_OFFLINE: true

      - name: Run all integration tests together
        run: |
          # Run all three integration tests to ensure they work together
          cargo install cargo-nextest --locked || true
          NEXTEST_SHOW_OUTPUT=always cargo nextest run --locked --test coordinator_worker_integration
        env:
          RUST_BACKTRACE: 1
          DATABASE_URL: sqlite://./complete_integration_test.db
          SQLX_OFFLINE: true

      - name: Upload complete-suite DB (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: complete-suite-sqlite-db
          path: ./complete_integration_test.db
          if-no-files-found: ignore
          retention-days: 7

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Lint integration tests
        run: cargo clippy --workspace --tests --all-features -- -D warnings
        env:
          SQLX_OFFLINE: true
