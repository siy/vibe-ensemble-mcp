name: Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run integration tests nightly at 2 AM UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  DATABASE_URL: sqlite:./integration_test.db
  RUSTFLAGS: "-D warnings"
  SQLX_OFFLINE: true

jobs:
  coordinator-worker-integration:
    name: Coordinator-Worker Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4
        with:
          # Need full history for git worktree operations
          fetch-depth: 0
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "stable"
          components: rustfmt, clippy
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git
          git --version
      
      - name: Set up git for integration tests
        run: |
          git config --global user.name "Integration Tests"
          git config --global user.email "integration-tests@vibe-ensemble.local"
          git config --global init.defaultBranch main
      
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-integration-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Build integration test dependencies
        run: |
          # Build the workspace first to ensure all dependencies are available
          cargo build --workspace --tests
      
      - name: Run coordinator-worker integration tests
        run: |
          # Run the specific coordinator-worker integration tests
          cargo test --test coordinator_worker_integration --verbose -- --nocapture
        env:
          RUST_BACKTRACE: full
          RUST_LOG: debug
          # Use a separate database for integration tests
          DATABASE_URL: sqlite:./coordinator_worker_integration_test.db
      
      - name: Run comprehensive workflow tests
        run: |
          # Run additional integration test scenarios
          cargo test coordinator_worker_integration::tests::test_coordinator_creates_assigns_tickets --verbose
          cargo test coordinator_worker_integration::tests::test_multi_worker_isolated_workspaces --verbose  
          cargo test coordinator_worker_integration::tests::test_error_recovery_workflow --verbose
        env:
          RUST_BACKTRACE: full
          RUST_LOG: info
          DATABASE_URL: sqlite:./workflow_test.db

  git-worktree-integration:
    name: Git Worktree Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "stable"
      
      - name: Set up git
        run: |
          git config --global user.name "Worktree Tests"
          git config --global user.email "worktree-tests@vibe-ensemble.local"
      
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-worktree-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Test git worktree operations
        run: |
          # Test the worktree manager functionality
          cargo test --test coordinator_worker_integration worktree_manager --verbose
        env:
          RUST_BACKTRACE: 1

  file-system-verification:
    name: File System Verification Tests  
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "stable"
      
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-filesystem-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Test file system verification
        run: |
          # Test the file system verifier functionality
          cargo test --test coordinator_worker_integration file_system_verifier --verbose
        env:
          RUST_BACKTRACE: 1

  mock-agent-integration:
    name: Mock Agent Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "stable"
      
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-mock-agents-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Test mock agent interactions
        run: |
          # Test mock coordinator and worker agent functionality
          cargo test --test coordinator_worker_integration mock_agents --verbose
        env:
          RUST_BACKTRACE: 1
          DATABASE_URL: sqlite:./mock_agent_test.db

  performance-benchmarks:
    name: Integration Test Performance
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "stable"
      
      - name: Set up git
        run: |
          git config --global user.name "Performance Tests"
          git config --global user.email "perf-tests@vibe-ensemble.local"
      
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-perf-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Run performance benchmarks
        run: |
          # Build in release mode for performance testing
          cargo build --release --workspace --tests
          
          # Run performance-focused integration tests
          cargo test --release --test coordinator_worker_integration -- --nocapture --test-threads=1
        env:
          RUST_BACKTRACE: 1
          DATABASE_URL: sqlite:./performance_test.db
      
      - name: Upload performance results
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # In a real setup, you might upload results to a performance monitoring service
          echo "Performance test completed successfully"

  integration-test-summary:
    name: Integration Test Summary
    runs-on: ubuntu-latest
    needs: [coordinator-worker-integration, git-worktree-integration, file-system-verification, mock-agent-integration, performance-benchmarks]
    if: always()

    steps:
      - name: Check integration test results
        run: |
          # Check if all integration tests passed
          if [[ "${{ needs.coordinator-worker-integration.result }}" == "success" && \
                "${{ needs.git-worktree-integration.result }}" == "success" && \
                "${{ needs.file-system-verification.result }}" == "success" && \
                "${{ needs.mock-agent-integration.result }}" == "success" && \
                "${{ needs.performance-benchmarks.result }}" == "success" ]]; then
            echo "✅ All integration tests passed!"
            exit 0
          else
            echo "❌ Some integration tests failed:"
            echo "  Coordinator-Worker: ${{ needs.coordinator-worker-integration.result }}"
            echo "  Git Worktree: ${{ needs.git-worktree-integration.result }}"
            echo "  File System: ${{ needs.file-system-verification.result }}"
            echo "  Mock Agents: ${{ needs.mock-agent-integration.result }}"
            echo "  Performance: ${{ needs.performance-benchmarks.result }}"
            exit 1
          fi
      
      - name: Post integration test results
        if: github.event_name == 'pull_request'
        run: |
          echo "Integration test results would be posted to PR here in a full implementation"