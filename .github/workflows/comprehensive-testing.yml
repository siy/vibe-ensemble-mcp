name: Comprehensive Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC

env:
  CARGO_TERM_COLOR: always
  DATABASE_URL: sqlite:./test.db
  RUST_LOG: debug
  RUSTFLAGS: "-D warnings"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      rust-version: ${{ steps.rust-info.outputs.version }}
      test-matrix: ${{ steps.test-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: Get Rust version
        id: rust-info
        run: |
          VERSION=$(grep 'rust-version' Cargo.toml | cut -d '"' -f 2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Generate test matrix
        id: test-matrix
        run: |
          echo 'matrix=["unit","integration","e2e","performance","security"]' >> $GITHUB_OUTPUT

  code-quality:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "stable"
          components: rustfmt, clippy
      
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-quality-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-quality-
            ${{ runner.os }}-cargo-
      
      - name: Check code formatting
        run: cargo fmt --all -- --check
      
      - name: Run clippy (strict)
        run: cargo clippy --all-targets --all-features -- -D warnings
      
      - name: Check for unused dependencies
        run: |
          cargo install cargo-udeps --locked
          cargo +nightly udeps --all-targets
      
      - name: Security audit
        run: |
          cargo install cargo-audit --locked
          cargo audit
      
      - name: Check documentation
        run: cargo doc --no-deps --document-private-items

  unit-tests:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        package: 
          - vibe-ensemble-core
          - vibe-ensemble-mcp
          - vibe-ensemble-storage
          - vibe-ensemble-web
          - vibe-ensemble-security
          - vibe-ensemble-monitoring
          - vibe-ensemble-prompts
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "stable"
      
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-unit-${{ matrix.package }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-unit-${{ matrix.package }}-
            ${{ runner.os }}-cargo-unit-
            ${{ runner.os }}-cargo-
      
      - name: Run unit tests for ${{ matrix.package }}
        run: |
          cd ${{ matrix.package }}
          cargo test --lib --tests --verbose
        env:
          RUST_BACKTRACE: 1
      
      - name: Run doctests for ${{ matrix.package }}
        run: |
          cd ${{ matrix.package }}
          cargo test --doc

  integration-tests:
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vibe_ensemble_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "stable"
      
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-integration-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-integration-
            ${{ runner.os }}-cargo-
      
      - name: Install SQLx CLI
        run: cargo install sqlx-cli --no-default-features --features postgres,sqlite
      
      - name: Setup test databases
        run: |
          # SQLite test database
          sqlx migrate run --source vibe-ensemble-storage/migrations
          
          # PostgreSQL test database
          export DATABASE_URL="postgres://postgres:postgres@localhost/vibe_ensemble_test"
          sqlx migrate run --source vibe-ensemble-storage/migrations
      
      - name: Run integration tests
        run: cargo test --test integration --verbose
        env:
          DATABASE_URL: sqlite:./test.db
          POSTGRES_DATABASE_URL: "postgres://postgres:postgres@localhost/vibe_ensemble_test"
          RUST_BACKTRACE: 1
      
      - name: Run MCP protocol compliance tests
        run: cargo test mcp_protocol --verbose
        env:
          RUST_BACKTRACE: 1

  e2e-tests:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "stable"
      
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-e2e-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-e2e-
            ${{ runner.os }}-cargo-
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y sqlite3
      
      - name: Run end-to-end tests
        run: cargo test --test e2e --verbose
        env:
          DATABASE_URL: sqlite:./test_e2e.db
          RUST_BACKTRACE: 1
        timeout-minutes: 30
      
      - name: Run multi-agent coordination tests
        run: cargo test multi_agent_coordination --verbose
        timeout-minutes: 20

  performance-tests:
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]')
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "stable"
      
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-perf-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-perf-
            ${{ runner.os }}-cargo-
      
      - name: Install performance testing tools
        run: |
          cargo install cargo-criterion
          cargo install flamegraph
      
      - name: Run performance benchmarks
        run: cargo test --test performance --release --verbose
        env:
          DATABASE_URL: sqlite:./test_perf.db
        timeout-minutes: 45
      
      - name: Run Criterion benchmarks
        run: cargo criterion --output-format html
        continue-on-error: true
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: benchmark-results
          path: target/criterion/
          retention-days: 30

  security-tests:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "stable"
      
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-security-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-security-
            ${{ runner.os }}-cargo-
      
      - name: Install security testing tools
        run: |
          cargo install cargo-audit
          cargo install cargo-deny
      
      - name: Run security audit
        run: cargo audit
      
      - name: Check license compliance
        run: cargo deny check licenses
      
      - name: Run security tests
        run: cargo test --test security --verbose
        env:
          DATABASE_URL: sqlite:./test_security.db
          RUST_BACKTRACE: 1
        timeout-minutes: 15
      
      - name: Run penetration tests
        run: cargo test security_tests --verbose
        continue-on-error: true

  coverage:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "stable"
      
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-coverage-
            ${{ runner.os }}-cargo-
      
      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin
      
      - name: Generate code coverage
        run: |
          cargo tarpaulin \
            --verbose \
            --all-features \
            --workspace \
            --timeout 300 \
            --exclude-files "tests/*" "target/*" \
            --out xml \
            --out html \
            --output-dir coverage/
        env:
          DATABASE_URL: sqlite:./test_coverage.db
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage/cobertura.xml
          fail_ci_if_error: false
          verbose: true
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 30
      
      - name: Check coverage threshold
        run: |
          COVERAGE=$(grep -o 'line-rate="[^"]*"' coverage/cobertura.xml | head -1 | cut -d'"' -f2)
          COVERAGE_PERCENT=$(echo "$COVERAGE * 100" | bc)
          echo "Coverage: $COVERAGE_PERCENT%"
          if (( $(echo "$COVERAGE < 0.90" | bc -l) )); then
            echo "Coverage $COVERAGE_PERCENT% is below 90% threshold"
            exit 1
          fi

  cross-platform:
    runs-on: ${{ matrix.os }}
    needs: setup
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "stable"
      
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-cross-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-cross-
            ${{ runner.os }}-cargo-
      
      - name: Run cross-platform tests
        run: cargo test --workspace --verbose
        env:
          DATABASE_URL: sqlite:./test_cross.db
          RUST_BACKTRACE: 1

  property-based-tests:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "stable"
      
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-prop-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-prop-
            ${{ runner.os }}-cargo-
      
      - name: Run property-based tests
        run: |
          cargo test proptest --verbose -- --test-threads=1
        env:
          DATABASE_URL: sqlite:./test_prop.db
          PROPTEST_CASES: 1000
          RUST_BACKTRACE: 1
        timeout-minutes: 20

  final-validation:
    runs-on: ubuntu-latest
    needs: 
      - code-quality
      - unit-tests
      - integration-tests
      - e2e-tests
      - security-tests
      - coverage
      - cross-platform
      - property-based-tests
    if: always()
    steps:
      - name: Check overall status
        run: |
          if [[ "${{ needs.code-quality.result }}" == "failure" ]]; then
            echo "Code quality checks failed"
            exit 1
          fi
          
          if [[ "${{ needs.unit-tests.result }}" == "failure" ]]; then
            echo "Unit tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.integration-tests.result }}" == "failure" ]]; then
            echo "Integration tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.e2e-tests.result }}" == "failure" ]]; then
            echo "End-to-end tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.security-tests.result }}" == "failure" ]]; then
            echo "Security tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.coverage.result }}" == "failure" ]]; then
            echo "Coverage requirements not met"
            exit 1
          fi
          
          if [[ "${{ needs.cross-platform.result }}" == "failure" ]]; then
            echo "Cross-platform tests failed"
            exit 1
          fi
          
          echo "All required tests passed! ✅"
      
      - name: Post success notification
        if: success() && github.ref == 'refs/heads/main'
        run: |
          echo "Comprehensive testing pipeline completed successfully"
          echo "Ready for deployment"

  cleanup:
    runs-on: ubuntu-latest
    needs: [final-validation]
    if: always()
    steps:
      - name: Cleanup artifacts
        run: |
          echo "Cleaning up temporary test artifacts"
          # Add cleanup commands if needed