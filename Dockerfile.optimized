# Optimized Production Dockerfile for Vibe Ensemble MCP Server
# Major optimizations:
# - Single-stage dependency caching with proper invalidation
# - Parallel compilation with all CPU cores
# - Target-specific builds (only server binary)
# - Reduced layers and minimal context copying
# - Improved cache hit ratio with better layer ordering

# Build stage - Optimized for speed and caching
FROM rust:1.89-slim AS builder

# Install build dependencies in single layer
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    libsqlite3-dev \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

WORKDIR /app

# Set optimal build environment
ENV CARGO_NET_RETRY=10
ENV CARGO_IO_TIMEOUT=600
ENV RUSTUP_MAX_RETRIES=10
ENV CARGO_INCREMENTAL=0
ENV CARGO_BUILD_JOBS=0
ENV SQLX_OFFLINE=true
ENV RUSTFLAGS="-C target-cpu=generic -C opt-level=3 -C codegen-units=1 -C strip=symbols"

# Copy dependency files first for optimal caching
COPY Cargo.toml Cargo.lock ./
COPY vibe-ensemble-core/Cargo.toml ./vibe-ensemble-core/
COPY vibe-ensemble-server/Cargo.toml ./vibe-ensemble-server/
COPY vibe-ensemble-storage/Cargo.toml ./vibe-ensemble-storage/
COPY vibe-ensemble-web/Cargo.toml ./vibe-ensemble-web/
COPY vibe-ensemble-prompts/Cargo.toml ./vibe-ensemble-prompts/
COPY vibe-ensemble-mcp/Cargo.toml ./vibe-ensemble-mcp/

# Create minimal dummy source files for dependency caching
RUN mkdir -p \
    vibe-ensemble-core/src \
    vibe-ensemble-server/src \
    vibe-ensemble-storage/src \
    vibe-ensemble-web/src \
    vibe-ensemble-prompts/src \
    vibe-ensemble-mcp/src \
    && echo "fn main() {}" > vibe-ensemble-server/src/main.rs \
    && echo "" > vibe-ensemble-core/src/lib.rs \
    && echo "" > vibe-ensemble-storage/src/lib.rs \
    && echo "" > vibe-ensemble-web/src/lib.rs \
    && echo "" > vibe-ensemble-prompts/src/lib.rs \
    && echo "" > vibe-ensemble-mcp/src/lib.rs

# Build dependencies only (optimized for caching)
RUN cargo build --release --locked --bin vibe-ensemble  \
    && rm -rf target/release/deps/vibe_ensemble* target/release/build/vibe-ensemble* \
    && find target/release/deps -name "*vibe_ensemble*" -delete

# Copy SQLx prepared queries (needed before source copy)
COPY .sqlx/ ./.sqlx/

# Copy only necessary source files (minimize context invalidation)
COPY vibe-ensemble-core/src/ ./vibe-ensemble-core/src/
COPY vibe-ensemble-server/src/ ./vibe-ensemble-server/src/
COPY vibe-ensemble-storage/src/ ./vibe-ensemble-storage/src/
COPY vibe-ensemble-web/src/ ./vibe-ensemble-web/src/
COPY vibe-ensemble-prompts/src/ ./vibe-ensemble-prompts/src/
COPY vibe-ensemble-mcp/src/ ./vibe-ensemble-mcp/src/

# Copy required resources
COPY vibe-ensemble-web/templates/ ./vibe-ensemble-web/templates/
COPY vibe-ensemble-storage/migrations/ ./vibe-ensemble-storage/migrations/

# Final build with maximum optimization and parallel compilation
RUN cargo build --release --locked --bin vibe-ensemble  \
    && strip target/release/vibe-ensemble \
    && ls -la target/release/vibe-ensemble

# Runtime stage - Minimal production image
FROM debian:bookworm-slim AS runtime

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libssl3 \
    libsqlite3-0 \
    curl \
    dumb-init \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && apt-get autoremove -y

# Create non-root user with specific UID/GID for security
RUN groupadd -r -g 1001 vibe-ensemble \
    && useradd -r -u 1001 -g vibe-ensemble -d /app -s /sbin/nologin -c "Vibe Ensemble Service" vibe-ensemble

# Set up application directory
WORKDIR /app
RUN mkdir -p /app/data /app/logs /app/config /app/tmp \
    && chmod 750 /app/data /app/logs /app/config \
    && chmod 1750 /app/tmp \
    && chown -R vibe-ensemble:vibe-ensemble /app

# Copy binary and resources from builder
COPY --from=builder --chown=root:root /app/target/release/vibe-ensemble /usr/local/bin/vibe-ensemble
RUN chmod 755 /usr/local/bin/vibe-ensemble
COPY --from=builder --chown=vibe-ensemble:vibe-ensemble /app/vibe-ensemble-storage/migrations/ /app/migrations/
COPY --from=builder --chown=vibe-ensemble:vibe-ensemble /app/vibe-ensemble-web/templates/ /app/templates/

# Switch to non-root user
USER vibe-ensemble

# Set secure production environment
ENV DATABASE_URL="sqlite:///app/data/vibe-ensemble.db"
ENV RUST_LOG="info,vibe_ensemble=debug"
ENV SERVER_HOST="0.0.0.0"
ENV SERVER_PORT="8080"
ENV METRICS_PORT="9090"
ENV RUST_BACKTRACE="0"
ENV TZ=UTC

# Expose ports
EXPOSE 8080 9090

# Enhanced health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/api/health && \
        curl -f http://localhost:9090/metrics > /dev/null || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["/usr/bin/dumb-init", "--"]
CMD ["vibe-ensemble"]

# Production stage (alias for runtime - used by docker-compose.yml)
FROM runtime AS production

# Metadata
LABEL maintainer="Vibe Ensemble Team"
LABEL version="0.2.0"
LABEL description="Vibe Ensemble MCP Server - Production Optimized"
LABEL security.non-root="true"